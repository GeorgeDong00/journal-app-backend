from marshmallow import validate
from app.extensions import db, ma

class User(db.Model):
    """
    User model representing the journal user and their daily posts and weekly advices.

    Attributes:
    - id (int): Autogenerated primary key
    - firebase_uid (str): Retrieved from Firebase Bearer token and used as a index

    Relationships:
    - posts (List[Post]): One-to-Many relationship with Post model
    - weekly_advices (List[WeeklyAdvice]): One to Many relationship with WeeklyAdvice model
    """

    __tablename__ = "users"

    id = db.Column(db.Integer, primary_key=True)
    firebase_uid = db.Column(db.String(128), unique=True, nullable=False, index=True)
    posts = db.relationship(
        "Post", backref="user", lazy=True, cascade="all, delete-orphan"
    )
    weekly_advices = db.relationship(
        "WeeklyAdvice", backref="user", lazy=True, cascade="all, delete-orphan"
    )

    def __repr__(self):
        """
        String representation of the User instance
        """
        return f"<User {self.firebase_uid}>"


class UserSchema(ma.SQLAlchemySchema):
    """
    Marshmallow schema for serializing and deserializing User instances.

    Data Validation:
    - firebase_uid: Required and cannot be empty
    """

    class Meta:
        model = User
        load_instance = True

    id = ma.auto_field()
    firebase_uid = ma.auto_field(required=True, validate=validate.Length(min=1))
